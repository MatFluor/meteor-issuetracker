// Define Minimongo collections to match server/publish.js.Projects = new Meteor.Collection("projects");Issues = new Meteor.Collection("issues");Session.set("debug", false); // set to true to show debug related infoSession.set("page", "home"); // home is the default pageSession.set("selected_pid", null);Session.set("selected_id", null);Session.set("selected_issue_status_filter", null);Session.set("help_after_login", null);Session.set("help_filter_by_issue_status", null);var defaultToastrOptions = {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250};var lengthyToastrOptions = {fadeIn: 250, fadeOut: 250, timeOut: 10000, extendedTimeOut: 250};var confirmToastrOptions = {fadeIn: 250, fadeOut: 250, timeOut: 0, extendedTimeOut: 0, onclick: null, tapToDismiss: false};Meteor.startup(function () {  Meteor.autosubscribe(function () {    if (Meteor.user()) {      Meteor.subscribe("userData");      if (Meteor.user().role === "admin") {        Meteor.subscribe("allUserData");      }      Meteor.subscribe("projects");      if (Session.get("selected_pid")) {        Meteor.subscribe("issues", Session.get("selected_pid"));      }    }  });  Accounts.ui.config({    passwordSignupFields: "EMAIL_ONLY"  });  $(window).resize(function() {    createWaypoints();  });});// Global Handlebars Helpers --------------------------------------------Handlebars.registerHelper("isDebug", function() {  return Session.get("debug");});Handlebars.registerHelper("isAdmin", function() {  return Meteor.user().role === "admin";});Handlebars.registerHelper("isPageHome", function() {  return Session.equals("page", "home") ? true : false;});Handlebars.registerHelper("isPageUsers", function() {  return Session.equals("page", "users") ? true : false;});Handlebars.registerHelper("isProjectSelected", function() {  return Session.equals("selected_pid", null) ? false : true;});Handlebars.registerHelper("isIssueSelected", function() {  return Session.equals("selected_id", null) ? false : true;});// Global Handlebars Helpers --------------------------------------------// Templates ------------------------------------------------------------Template.navbar.rendered = function() {};Template.navbar.events({  "click a.brand": function (event) {    event.preventDefault();  },  "click a[href=\"#home\"]": function (event) {    event.preventDefault();    resetIssue();    resetProject();    Session.set("page", "home");  },  "click a[href=\"#users\"]": function (event) {    event.preventDefault();    Session.set("page", "users");  },});Template.navbar.helpers({  activePage: function (page) {    return Session.equals("page", page) ? "active" : "";  }});Template.projectList.rendered = function() {  if (!Session.get("help_after_login")) {    toastr.info("", "Select or create a project to begin!", defaultToastrOptions);    Session.set("help_after_login", true);  }};Template.projectList.events({});Template.projectList.helpers({  projects: function () {    return Projects.find({}, {sort: {projectTitle: 1}});  }});Template.project.rendered = function() {};Template.project.events({  "click .project": function (event) {    resetIssue();    if (Session.get("selected_pid") != this._id) {      Session.set("selected_pid", this._id);    }    else {      resetProject();    }  }});Template.project.helpers({  selectedProject: function () {    return Session.equals("selected_pid", this._id) ? "selected" : "";  }});Template.projectInfo.rendered = function() {  if (Session.get("selected_pid")) {    var project = Projects.findOne(Session.get("selected_pid"));    Meteor.flush();    if (Session.get("debug")) {      $("#projectInfoUpdate_Project_id").val(Session.get("selected_pid"));      $("#projectInfoDelete_Project_id").val(Session.get("selected_pid"));    }    $("#projectInfoCreate_ProjectTitle").val("");    $("#projectInfoCreate_ProjectDescription").val("");    $("#projectInfoUpdate_ProjectTitle").val(project.projectTitle);    $("#projectInfoUpdate_ProjectDescription").val(project.projectDescription);    $("#projectInfoTabs a[href=\"#projectInfoOverview\"]").tab("show");  }  else {    Meteor.flush();    $("#projectInfoCreate_ProjectTitle").val("");    $("#projectInfoCreate_ProjectDescription").val("");    if (Meteor.user().role === "admin") {      $("#projectInfoTabs a[href=\"#projectInfoCreate\"]").tab("show");    }    else {      $("#projectInfoTabs a[href=\"#projectInfoOverview\"]").tab("show");    }  }};Template.projectInfo.events({  "click #projectInfoCreate_CreateProject": function (event) {    if ($("#projectInfoCreate_ProjectTitle").val() != "") {      var projectCreatedDate = (new Date()).getTime();      var insert_id = Projects.insert({projectTitle: $("#projectInfoCreate_ProjectTitle").val(), projectDescription: $("#projectInfoCreate_ProjectDescription").val(), projectCreatedDate: projectCreatedDate, lastIssueNumber: 0});      if (insert_id) {        Session.set("selected_pid", insert_id);        toastr.success("", "Project created", defaultToastrOptions);      }      else {        toastr.error("The project was not created", "Error", defaultToastrOptions);      }    }    else {      toastr.warning("", "Please enter a project title", defaultToastrOptions);    }  },  "click #projectInfoCreate_CancelProject": function (event) {    $("#projectInfoCreate_ProjectTitle").val("");    $("#projectInfoCreate_ProjectDescription").val("");    if (Session.get("selected_pid")) {      $("#projectInfoTabs a[href=\"#projectInfoOverview\"]").tab("show");    }  },  "click #projectInfoUpdate_UpdateProject": function (event) {    if ($("#projectInfoUpdate_ProjectTitle").val() != "") {      Projects.update(Session.get("selected_pid"), {$set: {projectTitle: $("#projectInfoUpdate_ProjectTitle").val(), projectDescription: $("#projectInfoUpdate_ProjectDescription").val()}});      toastr.success("", "Project updated", defaultToastrOptions);    }    else {      toastr.warning("", "Please enter a project title", defaultToastrOptions);    }  },  "click #projectInfoUpdate_CancelProject": function (event) {    if (Session.get("selected_pid")) {      var project = Projects.findOne(Session.get("selected_pid"));      if (Session.get("debug")) {        $("#projectInfoUpdate_Project_id").val(Session.get("selected_pid"));      }      $("#projectInfoUpdate_ProjectTitle").val(project.projectTitle);      $("#projectInfoUpdate_ProjectDescription").val(project.projectDescription);      $("#projectInfoTabs a[href=\"#projectInfoOverview\"]").tab("show");    }    else {      if (Meteor.user().role === "admin") {        $("#projectInfoTabs a[href=\"#projectInfoCreate\"]").tab("show");      }      else {        $("#projectInfoTabs a[href=\"#projectInfoOverview\"]").tab("show");      }    }  },  "click #projectInfoDelete_DeleteProject": function (event) {    if (Session.get("selected_pid")) {      $.blockUI({message: null, overlayCSS: {backgroundColor: "#fff"}});      var $toast = toastr.error("", "<div><button type=\"button\" id=\"deleteProjectYesBtn\" class=\"btn btn-primary\">Yes</button><button type=\"button\" id=\"deleteProjectNoBtn\" class=\"btn\" style=\"margin: 0 8px 0 8px\">No</button> Delete Project?</div>", confirmToastrOptions);      if ($toast.find("#deleteProjectYesBtn").length) {        $toast.delegate("#deleteProjectYesBtn", "click", function () {          resetIssue();          var projectIssues = Issues.find({_pid: Session.get("selected_pid")});          projectIssues.forEach(function (issue) {            Issues.remove({_id: issue._id});          });          Projects.remove({_id: Session.get("selected_pid")});          toastr.success("", "Project deleted", defaultToastrOptions);          resetProject();          $.unblockUI();          $toast.remove();        });      }      if ($toast.find("#deleteProjectNoBtn").length) {        $toast.delegate("#deleteProjectNoBtn", "click", function () {          $.unblockUI();          $toast.remove();          $("#projectInfoTabs a[href=\"#projectInfoOverview\"]").tab("show");        });      }    }  }});Template.projectInfo.helpers({  project: function () {    var project = Projects.findOne(Session.get("selected_pid"));    if (project) {      return project;    }  },  getIssueCount: function () {    if (Session.get("selected_pid")) {      return Issues.find({_pid: Session.get("selected_pid")}).count();    }    },  getIssueStatusCount: function (issueStatus) {    if (Session.get("selected_pid")) {      return Issues.find({_pid: Session.get("selected_pid"), issueStatus: issueStatus}).count();    }    }});Template.issueListFilters.events({  "click .issueListFilters_Status": function (event) {    if (!Session.get("help_filter_by_issue_status")) {      toastr.info("", "You are filtering issues by a particular status. To remove the filter, click again on the filter you just selected, or select another filter.", lengthyToastrOptions);      Session.set("help_filter_by_issue_status", true);    }    resetIssue();    Session.set("selected_issue_status_filter", Session.equals("selected_issue_status_filter", event.currentTarget.getAttribute("data-status")) ? null : event.currentTarget.getAttribute("data-status"));  }});Template.issueListFilters.helpers({  selectedIssueStatusFilter: function (whatStatus) {    return Session.equals("selected_issue_status_filter", whatStatus) ? "btn-inverse" : "";  }});Template.issueList.events({});Template.issueList.helpers({  issues: function () {    var selected_pid = Session.get("selected_pid");    if (!selected_pid) {      return {};    }    var query = {_pid: selected_pid};        var selectedStatusFilter = Session.get("selected_issue_status_filter");    if (selectedStatusFilter) {      query.issueStatus = selectedStatusFilter;    }    return Issues.find(query, {sort: {issueNumber: 1}});  }});Template.issue.events({  "click a.issueStatus": function (event) {    event.preventDefault();    Session.set("selected_id", this._id);    Issues.update(Session.get("selected_id"), {$set: {issueStatus: event.currentTarget.getAttribute("data-status")}});  },  "click tr.issue": function (event) {    if (event.target.nodeName != "A") {    var isNull = Session.equals("selected_id", null) ? true : false;      if (Session.get("selected_id") != this._id) {        Session.set("selected_id", this._id);        if (!isNull) { // Handle issue selection from another issue          var issue = Issues.findOne(Session.get("selected_id"));          Meteor.flush();          if (issue) {            if (Session.get("debug")) {              $("#issueInfoUpdate_Issue_id").val(Session.get("selected_id"));              $("#issueInfoDelete_Issue_id").val(Session.get("selected_id"));            }            $("#issueInfoCreate_IssueTitle").val("");            $("#issueInfoCreate_IssueDescription").val("");            $("#issueInfoUpdate_IssueNumber").val(issue.issueNumber);            $("#issueInfoUpdate_issueCreatedDate").val((new Date(issue.issueCreatedDate)).f("MM/dd/yyyy HH:mm a"));            $("#issueInfoUpdate_IssueTitle").val(issue.issueTitle);            $("#issueInfoUpdate_IssueDescription").val(issue.issueDescription);            $("#IssueInfoTabs a[href=\"#issueInfoUpdate\"]").tab("show");          }        }        if (matchMedia("only screen and (max-width: 979px)").matches) {          $.scrollTo($("#issueInfo"), 500, {offset: -10}); // Small screens        }        else {          $.scrollTo($("#issueInfo"), 500, {offset: -51}); // Large screens        }      }      else {        resetIssue();      }    }  }});Template.issue.helpers({  selectedIssue: function () {    return Session.equals("selected_id", this._id) ? "selected" : "";  },  issueStatusStyle: function () {    return (this.issueStatus).toLowerCase();  },  formatMilliseconds: function (milliseconds) {    return (new Date(milliseconds)).f("MM/dd/yyyy HH:mm a")  }});Template.issueInfo.rendered = function() {  if (Session.get("selected_id")) {    var issue = Issues.findOne(Session.get("selected_id"));    Meteor.flush();    if (issue) {      if (Session.get("debug")) {        $("#issueInfoUpdate_Issue_id").val(Session.get("selected_id"));        $("#issueInfoDelete_Issue_id").val(Session.get("selected_id"));      }      $("#issueInfoCreate_IssueTitle").val("");      $("#issueInfoCreate_IssueDescription").val("");      $("#issueInfoUpdate_IssueNumber").val(issue.issueNumber);      $("#issueInfoUpdate_issueCreatedDate").val((new Date(issue.issueCreatedDate)).f("MM/dd/yyyy HH:mm a"));      $("#issueInfoUpdate_IssueTitle").val(issue.issueTitle);      $("#issueInfoUpdate_IssueDescription").val(issue.issueDescription);      $("#IssueInfoTabs a[href=\"#issueInfoUpdate\"]").tab("show");    }  }  else {    Meteor.flush();    $("#issueInfoCreate_IssueTitle").val("");    $("#issueInfoCreate_IssueDescription").val("");    $("#IssueInfoTabs a[href=\"#issueInfoCreate\"]").tab("show");  }  createWaypoints();};Template.issueInfo.events({  "click #issueInfoCreate_CreateIssue": function (event) {    if ($("#issueInfoCreate_IssueTitle").val() != "") {      var issueCreatedDate = (new Date()).getTime();      var project = Projects.findOne(Session.get("selected_pid"));      var lastIssueNumber = project.lastIssueNumber;      var nextIssueNumber = lastIssueNumber + 1;      var insert_id = Issues.insert({_pid: Session.get("selected_pid"), issueNumber: nextIssueNumber, issueTitle: $("#issueInfoCreate_IssueTitle").val(), issueDescription: $("#issueInfoCreate_IssueDescription").val(), issueStatus: "New", issueCreatedDate: issueCreatedDate});      if (insert_id) {        Projects.update(Session.get("selected_pid"), {$set: {lastIssueNumber: nextIssueNumber}});        toastr.success("", "Issue created", defaultToastrOptions);      }      else {        toastr.error("The issue was not created", "Error", defaultToastrOptions);      }      $("#issueInfoCreate_IssueTitle").val("");      $("#issueInfoCreate_IssueDescription").val("");      resetIssue();    }    else {      toastr.warning("", "Please enter an issue title", defaultToastrOptions);    }  },  "click #issueInfoCreate_CancelIssue": function (event) {    $("#issueInfoCreate_IssueTitle").val("");    $("#issueInfoCreate_IssueDescription").val("");  },  "click #issueInfoUpdate_UpdateIssue": function (event) {    if (Session.get("selected_id") != null) {      if ($("#issueInfoUpdate_IssueTitle").val() != "") {        Issues.update(Session.get("selected_id"), {$set: {issueTitle: $("#issueInfoUpdate_IssueTitle").val(), issueDescription: $("#issueInfoUpdate_IssueDescription").val()}});        toastr.success("", "Issue updated", defaultToastrOptions);      }      else {        toastr.warning("", "Please enter an issue title", defaultToastrOptions);      }    }  },  "click #issueInfoUpdate_CancelIssue": function (event) {    resetIssue();    $("#IssueInfoTabs a[href=\"#issueInfoCreate\"]").tab("show");  },  "click #issueInfoDelete_DeleteIssue": function (event) {    if (Session.get("selected_id")) {      $.blockUI({message: null, overlayCSS: {backgroundColor: "#fff"}});      var $toast = toastr.error("", "<div><button type=\"button\" id=\"deleteIssueYesBtn\" class=\"btn btn-primary\">Yes</button><button type=\"button\" id=\"deleteIssueNoBtn\" class=\"btn\" style=\"margin: 0 8px 0 8px\">No</button> Delete Issue?</div>", confirmToastrOptions);      if ($toast.find("#deleteIssueYesBtn").length) {        $toast.delegate("#deleteIssueYesBtn", "click", function () {          Issues.remove({_id: Session.get("selected_id")});          toastr.success("", "Issue deleted", defaultToastrOptions);          resetIssue();          $.unblockUI();          $toast.remove();        });      }      if ($toast.find("#deleteIssueNoBtn").length) {        $toast.delegate("#deleteIssueNoBtn", "click", function () {          $.unblockUI();          $toast.remove();          $("#IssueInfoTabs a[href=\"#issueInfoUpdate\"]").tab("show");        });      }    }  }});Template.issueInfo.helpers({  selectedIssue: function () {    return Session.equals("selected_id", null) ? false : true;  }});Template.userList.rendered = function() {};Template.userList.events({});Template.userList.helpers({  users: function () {    return Meteor.users.find({}, {sort: {"emails.0.address": 1}});  }});Template.user.rendered = function() {};Template.user.events({  "click a.role": function (event) {    event.preventDefault();    Meteor.users.update(this._id, {$set: {role:event.target.text}});  }});Template.user.helpers({  email: function () {    return this.emails[0].address;  }});// Templates ------------------------------------------------------------// Functions ------------------------------------------------------------function createWaypoints() {    $.waypoints("destroy");    if ($("#issueInfo")) {      $("#issueInfo").removeClass("stuck");      // If there is not enough vertical height to display all of #issueInfo, then we will not attach a waypoint      var screenMatch = "only screen and (min-width: 768px) and (min-height: " + ($("#issueInfo").height() + 61) + "px)";      if (matchMedia(screenMatch).matches) {        $("#issueInfo").waypoint("sticky");      }    }};function resetProject() {  Session.set("selected_pid", null);};function resetIssue() {  Session.set("selected_id", null);};// Functions ------------------------------------------------------------