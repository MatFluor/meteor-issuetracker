// Define Minimongo collections to match server/publish.js.Projects = new Meteor.Collection("projects");Issues = new Meteor.Collection("issues");Session.set("debug", false);  // set to true to show debug related infoSession.set("selected_pid", null);Session.set("selected_id", null);Session.set("selected_issue_status_filter", null);Session.set("help_after_login", null);Session.set("help_filter_by_issue_status", null);Meteor.startup(function () {  $(window).resize(function() {    createWaypoints();  });});Meteor.subscribe("projects", function () {  if ((!Session.get("selected_pid"))&&(Meteor.user())) {    var project = Projects.findOne({}, {sort: {projectTitle: 1}});    if (project) {      Session.set("selected_pid", project._id);    }  }});Meteor.autosubscribe(function () {  if (Session.get("selected_pid")) {    Meteor.subscribe("issues", Session.get("selected_pid"));  }});Handlebars.registerHelper("isProjectSelected", function() {  return Session.equals("selected_pid", null) ? false : true;});Handlebars.registerHelper("isDebug", function() {  return Session.get("debug");});Template.projectList.rendered = function() {  if (!Session.get("help_after_login")) {    toastr.info("", "Select or create a project to begin!", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});    Session.set("help_after_login", true);  }};Template.projectList.events({});Template.projectList.helpers({  projects: function () {    return Projects.find({}, {sort: {projectTitle: 1}});  }});Template.project.events({  "click .project": function (event) {    resetIssue();    if (Session.get("selected_pid") != this._id) {      Session.set("selected_pid", this._id);      var project = Projects.findOne(Session.get("selected_pid"));      if (matchMedia("only screen and (max-width: 767px)").matches) {        //$.scrollTo($("#projectInfoB"), 500, {offset: -10});      }      if (Session.get("debug")) $("#projectInfoA_Project_id").val(Session.get("selected_pid"));      $("#projectInfoA_ProjectTitle").val(project.projectTitle);      $("#projectInfoA_ProjectDescription").val(project.projectDescription);    }    else {      resetProject();    }  }});Template.project.helpers({  selectedProject: function () {    return Session.equals("selected_pid", this._id) ? "selected" : "";  }});Template.projectInfoA.rendered = function() {  if (Session.get("selected_pid")) {    var project = Projects.findOne(Session.get("selected_pid"));    if (Session.get("debug")) $("#projectInfoA_Project_id").val(Session.get("selected_pid"));    $("#projectInfoA_ProjectTitle").val(project.projectTitle);    $("#projectInfoA_ProjectDescription").val(project.projectDescription);  }}Template.projectInfoA.events({  "click #projectInfoA_CreateProject": function (event) {    if ($("#projectInfoA_ProjectTitle").val() != "") {      var insert_id = Projects.insert({projectTitle: $("#projectInfoA_ProjectTitle").val(), projectDescription: $("#projectInfoA_ProjectDescription").val()});      if (insert_id) {        Session.set("selected_pid", insert_id);        toastr.success("", "Project created", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});      }      else {        toastr.error("The project was not created", "Error", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});      }    }    else {      toastr.warning("", "Please enter a project title", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});    }  },  "click #projectInfoA_UpdateProject": function (event) {    if ($("#projectInfoA_ProjectTitle").val() != "") {      Projects.update(Session.get("selected_pid"), {$set: {projectTitle: $("#projectInfoA_ProjectTitle").val(), projectDescription: $("#projectInfoA_ProjectDescription").val()}});      toastr.success("", "Project updated", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});    }    else {      toastr.warning("", "Please enter a project title", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});    }  },  "click #projectInfoA_DeleteProject": function (event) {    if (Session.get("selected_pid") != null) {      $.blockUI({message: null, overlayCSS: {backgroundColor: '#fff'}});      var $toast = toastr.error("", "<div><button type='button' id='deleteProjectYesBtn' class='btn btn-primary'>Yes</button><button type='button' id='deleteProjectNoBtn' class='btn' style='margin: 0 8px 0 8px'>No</button> Delete Project?</div>", {fadeIn: 250, fadeOut: 250, timeOut: 0, extendedTimeOut: 0, onclick: null, tapToDismiss: false});      if ($toast.find('#deleteProjectYesBtn').length) {        $toast.delegate('#deleteProjectYesBtn', 'click', function () {          resetIssue();          var projectIssues = Issues.find({_pid: Session.get("selected_pid")});          projectIssues.forEach(function (issue) {            Issues.remove({_id: issue._id});          });          Projects.remove({_id: Session.get("selected_pid")});          toastr.success("", "Project deleted", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});          resetProject();          $.unblockUI();          $toast.remove();        });      }      if ($toast.find('#deleteProjectNoBtn').length) {        $toast.delegate('#deleteProjectNoBtn', 'click', function () {          $.unblockUI();          $toast.remove();        });      }    }  },  "click #projectInfoA_CancelProject": function (event) {    resetIssue();    resetProject();  }});Template.projectInfoA.helpers({  selectedProject: function () {    return Session.equals("selected_pid", null) ? false : true;  }});Template.projectInfoB.rendered = function() {  //$("#projectInfoB").waypoint("sticky");}Template.projectInfoB.events({});Template.projectInfoB.helpers({  project: function () {    var project = Projects.findOne(Session.get("selected_pid"));    if (project) {      return project;    }  },  getTotalIssueCount: function () {    if (Session.get("selected_pid")) {      return Issues.find({_pid: Session.get("selected_pid")}).count();    }    },  getIssueStatusCount: function (issueStatus) {    if (Session.get("selected_pid")) {      return Issues.find({_pid: Session.get("selected_pid"), issueStatus: issueStatus}).count();    }    }});Template.issueListFilters.events({  "click .issueListFilters_Status": function (event) {    if (!Session.get("help_filter_by_issue_status")) {      toastr.info("", "You are filtering issues by a particular status. To remove the filter, click again on the filter you just selected, or select another filter.", {fadeIn: 250, fadeOut: 250, timeOut: 10000, extendedTimeOut: 250});      Session.set("help_filter_by_issue_status", true);    }    resetIssue();    Session.set("selected_issue_status_filter", Session.equals("selected_issue_status_filter", event.currentTarget.getAttribute("data-status")) ? null : event.currentTarget.getAttribute("data-status"));  }});Template.issueListFilters.helpers({  selectedIssueStatusFilter: function (whatStatus) {    return Session.equals("selected_issue_status_filter", whatStatus) ? "btn-inverse" : "";  }});Template.issueList.events({});Template.issueList.helpers({  issues: function () {    var selected_pid = Session.get("selected_pid");    if (!selected_pid) {      return {};    }    var query = {_pid: selected_pid};        var selectedStatusFilter = Session.get("selected_issue_status_filter");    if (selectedStatusFilter) {      query.issueStatus = selectedStatusFilter;    }    return Issues.find(query, {sort: {issueNumber: 1}});  }});Template.issue.events({  "click a.issueStatus": function (event) {    event.preventDefault();    Session.set("selected_id", this._id);    Issues.update(Session.get("selected_id"), {$set: {issueStatus:event.target.text}});    resetIssue();  },  "click tr.issue": function (event) {    if (event.target.nodeName != "A") {      if (Session.get("selected_id") != this._id) {        Session.set("selected_id", this._id);        var issue = Issues.findOne(Session.get("selected_id"));        if (matchMedia("only screen and (max-width: 979px)").matches) {          $.scrollTo($("#issueInfo"), 500, {offset: -10});        }        else {          $.scrollTo($("#issueInfo"), 500, {offset: -51});        }        if (Session.get("debug")) $("#issueInfo_Issue_id").val(Session.get("selected_id"));        $("#issueInfo_IssueNumber").val(issue.issueNumber);        $("#issueInfo_issueCreatedTime").val((new Date(issue.issueCreatedTime)).f("MM/dd/yyyy HH:mm a"));        $("#issueInfo_IssueTitle").val(issue.issueTitle);        $("#issueInfo_IssueDescription").val(issue.issueDescription);      }      else {        resetIssue();      }    }  }});Template.issue.helpers({  selectedIssue: function () {    return Session.equals("selected_id", this._id) ? "selected" : "";  },  statusStyle: function () {    return (this.issueStatus).toLowerCase().replace(" ", "-");  },  formatMilliseconds: function (milliseconds) {    return (new Date(milliseconds)).f("MM/dd/yyyy HH:mm a")  }});Template.issueInfo.rendered = function() {  createWaypoints()}Template.issueInfo.events({  "click #issueInfo_CreateIssue": function (event) {    if ($("#issueInfo_IssueTitle").val() != "") {      var issueCreatedTime = (new Date()).getTime();      var query = {_pid: Session.get("selected_pid")};      var lastIssue = Issues.findOne(query, {sort: {issueNumber: -1}});      var lastIssueNumber = 0;      if (lastIssue) {        lastIssueNumber = parseInt(lastIssue.issueNumber);      }            var insert_id = Issues.insert({_pid: Session.get("selected_pid"), issueNumber: (lastIssueNumber + 1), issueTitle: $("#issueInfo_IssueTitle").val(), issueDescription: $("#issueInfo_IssueDescription").val(), issueStatus: "New", issueCreatedTime: issueCreatedTime});      if (insert_id) {        toastr.success("", "Issue created", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});      }      else {        toastr.error("The issue was not created", "Error", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});      }      resetIssue();    }    else {      toastr.warning("", "Please enter an issue title", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});    }  },  "click #issueInfo_UpdateIssue": function (event) {    if (Session.get("selected_id") != null) {      if ($("#issueInfo_IssueTitle").val() != "") {        Issues.update(Session.get("selected_id"), {$set: {issueTitle: $("#issueInfo_IssueTitle").val(), issueDescription: $("#issueInfo_IssueDescription").val()}});        toastr.success("", "Issue updated", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});        resetIssue();      }      else {        toastr.warning("", "Please enter an issue title", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});      }    }  },  "click #issueInfo_DeleteIssue": function (event) {    if (Session.get("selected_id") != null) {      $.blockUI({message: null, overlayCSS: {backgroundColor: '#fff'}});      var $toast = toastr.error("", "<div><button type='button' id='deleteIssueYesBtn' class='btn btn-primary'>Yes</button><button type='button' id='deleteIssueNoBtn' class='btn' style='margin: 0 8px 0 8px'>No</button> Delete Issue?</div>", {fadeIn: 250, fadeOut: 250, timeOut: 0, extendedTimeOut: 0, onclick: null, tapToDismiss: false});      if ($toast.find('#deleteIssueYesBtn').length) {        $toast.delegate('#deleteIssueYesBtn', 'click', function () {          $.unblockUI();          Issues.remove({_id: Session.get("selected_id")});          toastr.success("", "Issue deleted", {fadeIn: 250, fadeOut: 250, timeOut: 3000, extendedTimeOut: 250});          resetIssue();          $toast.remove();        });      }      if ($toast.find('#deleteIssueNoBtn').length) {        $toast.delegate('#deleteIssueNoBtn', 'click', function () {          $.unblockUI();          $toast.remove();        });      }    }  },  "click #issueInfo_CancelIssue": function (event) {    resetIssue();  }});Template.issueInfo.helpers({  selectedIssue: function () {    return Session.equals("selected_id", null) ? false : true;  }});function createWaypoints() {    $.waypoints("destroy");    if ($("#issueInfo")) {      $("#issueInfo").removeClass("stuck");      // If there isn't enough vertical height to display all of #issueInfo, then we won't attach a waypoint      var screenMatch = "only screen and (min-width: 768px) and (min-height: " + ($("#issueInfo").height() + 61) + "px)";      if (matchMedia(screenMatch).matches) {        $("#issueInfo").waypoint("sticky");      }    }}function resetProject() {  Session.set("selected_pid", null);  if (Session.get("debug")) $("#projectInfoA_Project_id").val("");  $("#projectInfoA_ProjectTitle").val("");  $("#projectInfoA_ProjectDescription").val("");};function resetIssue() {  Session.set("selected_id", null);  if (Session.get("debug")) $("#issueInfo_Issue_id").val("");  $("#issueInfo_IssueNumber").val("");  $("#issueInfo_issueCreatedTime").val("");  $("#issueInfo_IssueTitle").val("");  $("#issueInfo_IssueDescription").val("");};